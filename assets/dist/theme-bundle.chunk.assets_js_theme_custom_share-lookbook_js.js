"use strict";
(self["webpackChunkbigcommerce_cornerstone"] = self["webpackChunkbigcommerce_cornerstone"] || []).push([["assets_js_theme_custom_share-lookbook_js"],{

/***/ "./assets/js/theme/custom/share-lookbook.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/custom/share-lookbook.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ShareLookbook)
/* harmony export */ });
/* harmony import */ var _graph_ql_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../graph-ql-service */ "./assets/js/graph-ql-service.js");
/* harmony import */ var _common_utils_product_scentflirt_label__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils/product-scentflirt-label */ "./assets/js/theme/common/utils/product-scentflirt-label.js");
/* harmony import */ var _common_utils_scentflirt_products__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils/scentflirt-products */ "./assets/js/theme/common/utils/scentflirt-products.js");
/* harmony import */ var _global_modal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../global/modal */ "./assets/js/theme/global/modal.js");
/* harmony import */ var _page_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../page-manager */ "./assets/js/theme/page-manager.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.min.js");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var ShareLookbook = /*#__PURE__*/function (_PageManager) {
  _inheritsLoose(ShareLookbook, _PageManager);
  function ShareLookbook() {
    return _PageManager.apply(this, arguments) || this;
  }
  var _proto = ShareLookbook.prototype;
  _proto.onReady = function onReady() {
    this.ids = this.getIdsFromUrl();
    if (!this.ids || !this.ids.length) {
      this.handleNoItems();
    } else {
      this.handleItems();
    }
  };
  _proto.getIdsFromUrl = function getIdsFromUrl() {
    var urlParams = new URLSearchParams(window.location.search);
    var idsParam = urlParams.get('ids');
    if (idsParam) {
      return idsParam.split(',');
    }
    return [];
  };
  _proto.handleNoItems = function handleNoItems() {
    var context = this.context;
    (0,_global_modal__WEBPACK_IMPORTED_MODULE_3__.showAlertModal)('No products to add!', {
      onConfirm: function onConfirm() {
        window.location.href = context.urls.cart;
      }
    });
  };
  _proto.handleItems = /*#__PURE__*/function () {
    var _handleItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var errors, isJoinProcess, customerAttrSubscriberType, customerAttrClubPink, _this$context$themeSe, scentflirt_subscriber_type_id, club_pink_subscriber_id, url, newCartId, existsKit, index, body, customFields, isScentflirtProduct, labelValueForScentflirt, disableButton, response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            errors = [];
            $('.message').text('Processing items...');
            _context.next = 4;
            return (0,_common_utils_scentflirt_products__WEBPACK_IMPORTED_MODULE_2__.isUnderJoinProcess)(this.context);
          case 4:
            isJoinProcess = _context.sent;
            if (!this.context.customer) {
              _context.next = 13;
              break;
            }
            _this$context$themeSe = this.context.themeSetting, scentflirt_subscriber_type_id = _this$context$themeSe.scentflirt_subscriber_type_id, club_pink_subscriber_id = _this$context$themeSe.club_pink_subscriber_id;
            _context.next = 9;
            return (0,_graph_ql_service__WEBPACK_IMPORTED_MODULE_0__.getDataFromGraphql)(this.context, 'getCustomerAttr', this.context.storefrontAPIToken, {
              attributeId: scentflirt_subscriber_type_id
            });
          case 9:
            customerAttrSubscriberType = _context.sent;
            _context.next = 12;
            return (0,_graph_ql_service__WEBPACK_IMPORTED_MODULE_0__.getDataFromGraphql)(this.context, 'getCustomerAttr', this.context.storefrontAPIToken, {
              attributeId: club_pink_subscriber_id
            });
          case 12:
            customerAttrClubPink = _context.sent;
          case 13:
            if (!(this.context.cartId && !isJoinProcess)) {
              _context.next = 16;
              break;
            }
            _context.next = 16;
            return this.removeCurrentCart(this.context.cartId);
          case 16:
            url = '/api/storefront/carts';
            newCartId = '';
            _context.next = 20;
            return (0,_common_utils_scentflirt_products__WEBPACK_IMPORTED_MODULE_2__.existsKitInCart)(this.context);
          case 20:
            existsKit = _context.sent;
            index = 0;
          case 22:
            if (!(index < this.ids.length)) {
              _context.next = 49;
              break;
            }
            body = {
              lineItems: [],
              locale: 'en'
            };
            body.lineItems.push({
              quantity: 1,
              productId: parseInt(this.ids[index], 10)
            });
            _context.prev = 25;
            _context.next = 28;
            return (0,_common_utils_scentflirt_products__WEBPACK_IMPORTED_MODULE_2__.getCustomFieldsByProductId)(this.context, this.ids[index]);
          case 28:
            customFields = _context.sent;
            isScentflirtProduct = (0,_common_utils_product_scentflirt_label__WEBPACK_IMPORTED_MODULE_1__.isProductAvailableForSubscription)(customFields);
            labelValueForScentflirt = (0,_common_utils_product_scentflirt_label__WEBPACK_IMPORTED_MODULE_1__.getLabelValue)(this.context, customFields, customerAttrSubscriberType, customerAttrClubPink);
            disableButton = labelValueForScentflirt.disableButton;
            if (!(existsKit && !isScentflirtProduct || isJoinProcess || disableButton)) {
              _context.next = 36;
              break;
            }
            errors.push(this.ids[index]);
            _context.next = 41;
            break;
          case 36:
            _context.next = 38;
            return this.addToCart(body, url);
          case 38:
            response = _context.sent;
            if (response && response.id) {
              newCartId = response.id;
              url = "/api/storefront/carts/" + newCartId + "/items";
            }
            if (response.status === 422) errors.push(this.ids[index]);
          case 41:
            _context.next = 46;
            break;
          case 43:
            _context.prev = 43;
            _context.t0 = _context["catch"](25);
            errors.push(this.ids[index]);
          case 46:
            index++;
            _context.next = 22;
            break;
          case 49:
            /* eslint-enable no-await-in-loop */
            if (errors.length) {
              $('.message').text(errors.length + " Items could not be added to cart");
            } else {
              $('.message').text('Redirecting to cart...');
            }
            window.location.href = this.context.urls.cart;
          case 51:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[25, 43]]);
    }));
    function handleItems() {
      return _handleItems.apply(this, arguments);
    }
    return handleItems;
  }();
  _proto.removeCurrentCart = /*#__PURE__*/function () {
    var _removeCurrentCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cartId) {
      var options;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            options = {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              }
            };
            return _context2.abrupt("return", fetch("/api/storefront/carts/" + cartId, options));
          case 5:
            _context2.prev = 5;
            _context2.t0 = _context2["catch"](0);
            console.error(_context2.t0);
            throw _context2.t0;
          case 9:
          case "end":
            return _context2.stop();
        }
      }, _callee2, null, [[0, 5]]);
    }));
    function removeCurrentCart(_x) {
      return _removeCurrentCart.apply(this, arguments);
    }
    return removeCurrentCart;
  }();
  _proto.addToCart = /*#__PURE__*/function () {
    var _addToCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(payload, url) {
      var options;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            options = {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            };
            return _context3.abrupt("return", fetch(url, options).then(function (response) {
              return response.json();
            }).then(function (response) {
              return response;
            })["catch"](function (err) {
              return console.error(err);
            }));
          case 2:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    function addToCart(_x2, _x3) {
      return _addToCart.apply(this, arguments);
    }
    return addToCart;
  }();
  return ShareLookbook;
}(_page_manager__WEBPACK_IMPORTED_MODULE_4__["default"]);


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,